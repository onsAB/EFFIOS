# -*- coding: utf-8 -*-
"""test2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12pUqoq0W1nZ_Cq0mczVegZHQTzYcF6DP

**2**
"""

import requests

def récupérer_premières_lignes(uai):
    url = f"https://data.education.gouv.fr/api/records/1.0/search/?dataset=fr-en-dnma-par-uai-appareils&rows=5&q=uai:{uai}"

    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()

        records = data.get("records", [])
        for record in records:
            fields = record.get("fields", {})
            print(fields)

    else:
        print("La requête n'a pas abouti. Code de statut :", response.status_code)

uai = input("Entrez l'UAI : ")
récupérer_premières_lignes(uai)

import requests
import pandas as pd
import matplotlib.pyplot as plt

def récupérer_données(uai):
    url = f"https://data.education.gouv.fr/api/records/1.0/search/?dataset=fr-en-dnma-par-uai-appareils&rows=10000&facet=debutsemaine&refine.uai={uai}"

    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        records = data.get("records", [])
        data_list = []
        for record in records:
            fields = record.get("fields", {})
            data_list.append(fields)
        df = pd.DataFrame(data_list)
        df['debutsemaine'] = pd.to_datetime(df['debutsemaine'])

        return df

    else:
        print("La requête n'a pas abouti. Code de statut :", response.status_code)
        return None

def générer_graphique(df, année):
    df = df[df['debutsemaine'].dt.year == année]
    df_grouped = df.groupby(df['debutsemaine'].dt.month).sum()[['visites_tablette', 'visites_smartphone', 'visites_ordinateur']]

    plt.figure(figsize=(10, 6))
    df_grouped.plot(kind='line', marker='o')
    plt.title(f"Évolution mensuelle du nombre de visites par appareil ({année})")
    plt.xlabel("Mois")
    plt.ylabel("Nombre de visites")
    plt.xticks(range(1, 13), ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Août', 'Sep', 'Oct', 'Nov', 'Déc'])
    plt.grid(True)
    plt.tight_layout()
    plt.legend(title='Appareil', loc='upper left')
    plt.show()

def main():
    uai = input("Entrez l'UAI : ")
    année = int(input("Entrez l'année : "))
    df = récupérer_données(uai)

    if df is not None:
        générer_graphique(df, année)

if __name__ == "__main__":
    main()

